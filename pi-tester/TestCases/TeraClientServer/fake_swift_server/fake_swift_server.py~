"""
Fake Swift server

localhost:8080 - Fake Swift server

Support Methods:
POST /api/account
"""
import socket
import os
import cgi
import pdb
import json
from time import gmtime, strftime

import BaseHTTPServer
from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler
import urlparse


CURRENT_FILE_PATH = os.path.dirname(__file__)


class FakeSwiftHandle(BaseHTTPRequestHandler):

    def do_GET(self):
        
        ipv4 = '172.16.31.109'
        # ipv4 = '127.0.0.1'
        # ipv4 = socket.gethostbyname('localhost')
        # ipv4 = socket.gethostbyname(socket.gethostname())
        url = 'http://' + ipv4 + ':8080/swift/v1' 
        

        if self.path == '/auth/v1.0':

            # url = 'http://' + socket.gethostbyname('fake.backend') + ':8080/swift/v1'
            storage_token = 'AUTH_rgwtk1900000030303239315a44454d4c39313a30303239315a44454d4c3931debb6c74f9ff7df780ba5757a029f22c894c7891d8e968f92ee45f7d08ab9bc44c0da9d8'
            req_id = 'tx0000000000000001b8442-0057566900-b5a954-default'
            
            self.send_response(200)
            self.send_header('Server', 'swift')
            self.send_header('X-Storage-Url', url)
            self.send_header('X-Storage-Token', storage_token)
            self.send_header('x-amz-request-id', req_id)
            self.send_header('X-Auth-Token', 'auth-token')
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            self.wfile.write('{"result": True,"code": 200}')

        else:

            self.send_response(200)
            self.send_header('Server', 'swift')
            self.send_header('X-Storage-Url', url)
            self.send_header('X-Storage-Token', 'storage-token')
            self.send_header('X-Auth-Token', 'auth-token')
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            self.wfile.write('{"result": True,"code": 200}')
            

    def do_PUT(self):
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        self.wfile.write(json.dumps({
            "result": True,
            "code": 200
        }))

    def do_POST(self):
        if self.path == '/auth/v1.0':

            # For response
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({
                "result": True,
                "code": 200
            }))

        else:
            self.send_response(400)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write('{"result":True,"code":400}')


class FakeSwiftServer(BaseHTTPServer.HTTPServer):
    def server_bind(self):
        BaseHTTPServer.HTTPServer.server_bind(self)
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)


def run_server(
        server_class=BaseHTTPServer.HTTPServer,
        handler_class=BaseHTTPServer.BaseHTTPRequestHandler):

    # TODO templary design
    # ipv4 = socket.gethostbyname('localhost')
    # ipv4 = '127.0.0.1'
    ipv4 = '172.16.31.109'
    server_address = (ipv4, 8080)
    httpd = server_class(server_address, handler_class)
    print 'fake swift server start...'
    print server_address
    httpd.serve_forever()

if __name__ == '__main__':
    run_server(server_class=FakeSwiftServer, handler_class=FakeSwiftHandle)
